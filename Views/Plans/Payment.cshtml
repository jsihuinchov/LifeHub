@model LifeHub.Models.ViewModels.PaymentViewModel
@{
    ViewData["Title"] = "Completar Pago - " + Model.Plan.Name;
}

<div class="payment-container">
    <div class="payment-header">
        <h1 class="payment-title">Completar Pago</h1>
        <p class="payment-subtitle">Estás a un paso de activar tu <strong>@Model.Plan.Name</strong></p>
    </div>

    <div class="row">
        <!-- Resumen del Plan -->
        <div class="col-md-5">
            <div class="plan-summary-card">
                <div class="summary-header" style="background: linear-gradient(135deg, @Model.Plan.ColorCode 0%, #@(Model.Plan.ColorCode.Substring(1))88 100%);">
                    <h4><i class="fas fa-receipt me-2"></i>Resumen del Plan</h4>
                </div>
                <div class="summary-body">
                    <div class="plan-info">
                        <h5 class="text-primary">@Model.Plan.Name</h5>
                        <p class="text-muted">@Model.Plan.ShortDescription</p>
                    </div>
                    
                    <div class="price-section">
                        <div class="price-amount">@Model.Plan.FormattedPrice</div>
                        <div class="price-period">/@Model.Plan.Period</div>
                    </div>

                    <div class="features-list">
                        <div class="feature-item">
                            <i class="fas fa-check text-success me-2"></i>
                            <span>@Model.Plan.MaxHabits hábitos simultáneos</span>
                        </div>
                        <div class="feature-item">
                            <i class="fas fa-check text-success me-2"></i>
                            <span>@Model.Plan.MaxTransactions transacciones/mes</span>
                        </div>
                        <div class="feature-item">
                            <i class="fas fa-check text-success me-2"></i>
                            <span>@Model.Plan.StorageMB MB almacenamiento</span>
                        </div>
                        @if (Model.Plan.HasCommunityAccess)
                        {
                            <div class="feature-item">
                                <i class="fas fa-check text-success me-2"></i>
                                <span>Acceso a la comunidad</span>
                            </div>
                        }
                        @if (Model.Plan.HasAIFeatures)
                        {
                            <div class="feature-item">
                                <i class="fas fa-check text-success me-2"></i>
                                <span>Análisis con IA</span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Información de Seguridad -->
            <div class="security-info mt-3">
                <div class="d-flex align-items-center justify-content-center text-muted">
                    <i class="fas fa-lock me-2"></i>
                    <small>Pago seguro procesado por Stripe</small>
                </div>
                <div class="d-flex align-items-center justify-content-center text-muted mt-1">
                    <i class="fas fa-shield-alt me-2"></i>
                    <small>Tus datos están encriptados</small>
                </div>
            </div>
        </div>

        <!-- Formulario de Pago -->
        <div class="col-md-7">
            <div class="payment-card">
                <div class="payment-card-header">
                    <h4><i class="fas fa-credit-card me-2"></i>Información de Pago</h4>
                </div>
                <div class="payment-card-body">
                    <!-- Stripe Elements Container -->
                    <form id="payment-form">
                        @Html.AntiForgeryToken()
                        <div id="payment-element">
                            <!-- Stripe.js injects the Payment Element -->
                        </div>
                        
                        <button id="submit" class="btn btn-primary btn-lg w-100 mt-4">
                            <div class="spinner hidden" id="spinner"></div>
                            <span id="button-text">Pagar @Model.Plan.FormattedPrice</span>
                        </button>
                        
                        <div id="payment-message" class="hidden mt-3 alert alert-danger"></div>
                    </form>

                    <div class="text-center mt-3">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Usa <strong>4242 4242 4242 4242</strong> para pruebas
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // Configuración de Stripe
        const stripe = Stripe('@Model.StripePublishableKey');
        const elements = stripe.elements({
            clientSecret: '@Model.PaymentIntentClientSecret',
            appearance: {
                theme: 'stripe',
                variables: {
                    colorPrimary: '@Model.Plan.ColorCode',
                    borderRadius: '8px'
                }
            }
        });

        const paymentElement = elements.create('payment');
        paymentElement.mount('#payment-element');

        const form = document.getElementById('payment-form');
        const submitButton = document.getElementById('submit');
        const spinner = document.getElementById('spinner');
        const buttonText = document.getElementById('button-text');
        const paymentMessage = document.getElementById('payment-message');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            submitButton.disabled = true;
            spinner.classList.remove('hidden');
            buttonText.textContent = 'Procesando pago...';
            
            const { error } = await stripe.confirmPayment({
                elements,
                confirmParams: {
                    return_url: `${window.location.origin}/Plans/PaymentSuccess?planId=@Model.Plan.Id`,
                },
            });

            if (error) {
                paymentMessage.textContent = error.message;
                paymentMessage.classList.remove('hidden');
                
                submitButton.disabled = false;
                spinner.classList.add('hidden');
                buttonText.textContent = 'Pagar @Model.Plan.FormattedPrice';
            }
        });
    </script>
}

@section Styles {
    <style>
        .payment-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .payment-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .payment-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .payment-subtitle {
            font-size: 1.1rem;
            color: #64748b;
        }

        .plan-summary-card, .payment-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid #f1f5f9;
            overflow: hidden;
        }

        .summary-header, .payment-card-header {
            color: white;
            padding: 1.5rem;
        }

        .summary-header h4, .payment-card-header h4 {
            margin: 0;
            font-weight: 600;
        }

        .summary-body, .payment-card-body {
            padding: 2rem;
        }

        .price-section {
            display: flex;
            align-items: baseline;
            margin: 1.5rem 0;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
        }

        .price-amount {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-right: 0.5rem;
        }

        .price-period {
            font-size: 1.2rem;
            color: #64748b;
        }

        .features-list {
            space-y: 0.75rem;
        }

        .feature-item {
            display: flex;
            align-items: center;
            padding: 0.5rem 0;
        }

        .security-info {
            text-align: center;
        }

        /* Estilos para Stripe Elements */
        #payment-element {
            margin-bottom: 1rem;
        }

        .hidden {
            display: none;
        }

        #spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3B82F6;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 8px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        #payment-message {
            color: #dc2626;
            font-size: 0.875rem;
            text-align: center;
        }
    </style>
}