using LifeHub.Models.Entities;

namespace LifeHub.Services
{
    public interface IFinanceService
    {
        // Transactions - Versi√≥n simplificada
        Task<List<FinancialTransaction>> GetUserTransactionsAsync(string userId);
        Task<FinancialTransaction?> GetTransactionByIdAsync(int id);
        Task<bool> CreateTransactionAsync(FinancialTransaction transaction);
        Task<bool> UpdateTransactionAsync(FinancialTransaction transaction);
        Task<bool> DeleteTransactionAsync(int id);

        // Budgets
        Task<List<Budget>> GetUserBudgetsAsync(string userId);
        Task<Budget?> GetBudgetByIdAsync(int id);
        Task<bool> CreateBudgetAsync(Budget budget);
        Task<bool> UpdateBudgetAsync(Budget budget);
        Task<bool> DeleteBudgetAsync(int id);

        // Reports & Analytics - Versi√≥n simplificada
        Task<FinanceSummary> GetFinanceSummaryAsync(string userId);
        Task<List<BudgetStatus>> GetBudgetStatusAsync(string userId);
        Task<bool> CheckBudgetAlertsAsync(string userId);

        // NUEVOS M√âTODOS PARA EL DASHBOARD MEJORADO
        Task<List<MonthlyData>> GetMonthlyDataAsync(string userId, int months = 6);
        Task<List<CategoryData>> GetExpenseByCategoryAsync(string userId);
        Task<List<CategoryData>> GetIncomeByCategoryAsync(string userId);

        // M√âTODOS PARA CONSEJOS FINANCIEROS
        Task<FinancialAdvice> GetRandomAdviceAsync();
        Task<FinancialAdvice> GetDailyAdviceAsync();
        Task<List<FinancialAdvice>> GetAdviceByCategoryAsync(string category);
        Task<List<string>> GetAdviceCategoriesAsync();

        // AGREGAR ESTE M√âTODO FALTANTE
        Task<List<CategorySummary>> GetCategorySummaryAsync(string userId, DateTime? startDate = null, DateTime? endDate = null);

        // NUEVA SECCI√ìN: Gr√°ficos y Visualizaciones
        Task<ChartData> GetMonthlyTrendChartAsync(string userId, int months = 6);
        Task<ChartData> GetExpenseDistributionChartAsync(string userId);
        Task<ChartData> GetIncomeDistributionChartAsync(string userId);
        Task<ChartData> GetBudgetProgressChartAsync(string userId);
    
        // M√©todos auxiliares para gr√°ficos
        Task<ChartData> GetCategoryComparisonChartAsync(string userId, string chartType = "bar");
        Task<ChartData> GetSavingsProgressChartAsync(string userId);
    }

    // Tus modelos existentes se mantienen, solo actualiza FinanceSummary:

    public class FinanceSummary
    {
        public decimal TotalIncome { get; set; }
        public decimal TotalExpenses { get; set; }
        public decimal NetAmount => TotalIncome - TotalExpenses;
        public decimal SavingsRate => TotalIncome > 0 ? (NetAmount / TotalIncome) * 100 : 0;
        public List<MonthlyData> MonthlyData { get; set; } = new();
        public List<CategoryData> TopExpenseCategories { get; set; } = new();

        // NUEVAS PROPIEDADES
        public int TotalTransactions { get; set; }
        public decimal AverageTransaction { get; set; }
        public decimal IncomeGrowth { get; set; }
        public decimal ExpenseGrowth { get; set; }
        public decimal MonthlyGoalProgress { get; set; }
    }

    // Los otros modelos que ya tienes se mantienen igual:
    public class MonthlyData
    {
        public string Month { get; set; } = string.Empty;
        public decimal Income { get; set; }
        public decimal Expenses { get; set; }
        public decimal Savings { get; set; }
    }

    public class CategoryData
    {
        public string Category { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public decimal Percentage { get; set; }
    }

    public class CategorySummary
    {
        public string Category { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public int TransactionCount { get; set; }
        public decimal AverageAmount { get; set; }
    }

    public class MonthlySummary
    {
        public int Year { get; set; }
        public int Month { get; set; }
        public decimal TotalIncome { get; set; }
        public decimal TotalExpenses { get; set; }
        public List<CategorySummary> CategoryBreakdown { get; set; } = new();
    }

    public class BudgetStatus
    {
        public Budget Budget { get; set; } = null!;
        public decimal SpentAmount { get; set; }
        public decimal RemainingAmount => Budget.MonthlyAmount - SpentAmount;
        public decimal UsagePercentage => Budget.MonthlyAmount > 0 ? (SpentAmount / Budget.MonthlyAmount) * 100 : 0;
        public bool IsOverBudget => SpentAmount > Budget.MonthlyAmount;
    }

    public class DetailedFinanceReport
    {
        public DateTime PeriodStart { get; set; }
        public DateTime PeriodEnd { get; set; }
        public int TotalTransactions { get; set; }
        public decimal TotalIncome { get; set; }
        public decimal TotalExpenses { get; set; }
        public decimal NetSavings { get; set; }
        public List<CategoryAnalysis> IncomeByCategory { get; set; } = new();
        public List<CategoryAnalysis> ExpensesByCategory { get; set; } = new();
        public List<MonthlyAnalysis> MonthlyAnalysis { get; set; } = new();
        public List<FinancialTransaction> LargestIncome { get; set; } = new();
        public List<FinancialTransaction> LargestExpenses { get; set; } = new();
    }

    public class CategoryAnalysis
    {
        public string Category { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public int TransactionCount { get; set; }
        public decimal AverageAmount { get; set; }
        public decimal Percentage { get; set; }
    }

    public class MonthlyAnalysis
    {
        public DateTime Month { get; set; }
        public decimal Income { get; set; }
        public decimal Expenses { get; set; }
        public decimal Savings { get; set; }
        public int TransactionCount { get; set; }

        // === NUEVOS M√âTODOS PARA CONSEJOS FINANCIEROS ===

        public async Task<FinancialAdvice> GetRandomAdviceAsync()
        {
            var adviceList = await GetFinancialAdviceListAsync();
            var random = new Random();
            return adviceList[random.Next(adviceList.Count)];
        }

        public async Task<FinancialAdvice> GetDailyAdviceAsync()
        {
            var adviceList = await GetFinancialAdviceListAsync();
            var today = DateTime.Today;
            var seed = today.Year * 10000 + today.Month * 100 + today.Day;
            var random = new Random(seed);

            return adviceList[random.Next(adviceList.Count)];
        }

        public async Task<List<FinancialAdvice>> GetAdviceByCategoryAsync(string category)
        {
            var adviceList = await GetFinancialAdviceListAsync();
            return adviceList.Where(a => a.Category.Equals(category, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        public async Task<List<string>> GetAdviceCategoriesAsync()
        {
            var adviceList = await GetFinancialAdviceListAsync();
            return adviceList.Select(a => a.Category).Distinct().ToList();
        }

        private async Task<List<FinancialAdvice>> GetFinancialAdviceListAsync()
        {
            // Base de datos local de consejos - 55+ consejos
            return new List<FinancialAdvice>
            {
                new() { Id = 1, Category = "Ahorro", Difficulty = "Beginner", Advice = "üí° Automatiza tus ahorros: configura transferencias autom√°ticas del 10% de tus ingresos a una cuenta de ahorros" },
                new() { Id = 2, Category = "Ahorro", Difficulty = "Beginner", Advice = "üí∞ La regla 50-30-20: destina 50% a necesidades, 30% a deseos y 20% al ahorro" },
                new() { Id = 3, Category = "Ahorro", Difficulty = "Intermediate", Advice = "üéØ Establece metas SMART: Espec√≠ficas, Medibles, Alcanzables, Relevantes y con Tiempo definido" },
                new() { Id = 4, Category = "Ahorro", Difficulty = "Beginner", Advice = "üì± Usa la regla de las 24 horas: espera un d√≠a antes de compras no esenciales para evitar impulsos" },
                new() { Id = 5, Category = "Ahorro", Difficulty = "Intermediate", Advice = "üè¶ Crea fondos separados: emergencia (3-6 meses de gastos), vacaciones, regalos, salud" },
                new() { Id = 6, Category = "Ahorro", Difficulty = "Advanced", Advice = "üìà Ahorra los aumentos de sueldo: destina el 50% de cualquier aumento a tus ahorros" },
                new() { Id = 7, Category = "Ahorro", Difficulty = "Beginner", Advice = "üîÑ Redondea tus gastos: redondea cada compra al siguiente 10 y ahorra la diferencia" },
                new() { Id = 8, Category = "Ahorro", Difficulty = "Intermediate", Advice = "üéÅ Aprovecha los reembolsos: guarda cualquier reembolso o dinero inesperado directamente en ahorros" },
                new() { Id = 9, Category = "Ahorro", Difficulty = "Beginner", Advice = "üìä Revisa suscripciones: cancela al menos una suscripci√≥n que no uses mensualmente" },
                new() { Id = 10, Category = "Ahorro", Difficulty = "Intermediate", Advice = "üçΩÔ∏è Cocina en casa: preparar comida 2 veces m√°s por semana puede ahorrarte hasta 30% en alimentaci√≥n" },
                new() { Id = 11, Category = "Ahorro", Difficulty = "Advanced", Advice = "üöó Transporte inteligente: usa transporte p√∫blico 2 d√≠as por semana, ahorrar√°s en gasolina y mantenimiento" },
                new() { Id = 12, Category = "Ahorro", Difficulty = "Beginner", Advice = "üéØ Ahorro por objetivos: divide metas grandes en mini-metas mensuales m√°s alcanzables" },
                new() { Id = 13, Category = "Ahorro", Difficulty = "Intermediate", Advice = "üè† Reduce costos de vivienda: considera roommates o alquilar un espacio m√°s peque√±o si es posible" },
                new() { Id = 14, Category = "Ahorro", Difficulty = "Beginner", Advice = "üì± Usa apps de cashback: obt√©n reembolsos en tus compras habituales sin esfuerzo adicional" },
                new() { Id = 15, Category = "Ahorro", Difficulty = "Advanced", Advice = "üí° Ahorro por desaf√≠o: prueba el desaf√≠o de 52 semanas, ahorrando $1 la semana 1, $2 la semana 2, etc." },

                // üí≥ CATEGOR√çA: GASTOS (15 consejos)
                new() { Id = 16, Category = "Gastos", Difficulty = "Beginner", Advice = "üìù Registra todos tus gastos por 30 d√≠as: el simple acto de anotar reduce gastos innecesarios en 15%" },
                new() { Id = 17, Category = "Gastos", Difficulty = "Beginner", Advice = "üõí Haz listas de compras: compra solo lo planeado y evita compras impulsivas" },
                new() { Id = 18, Category = "Gastos", Difficulty = "Intermediate", Advice = "üìä Analiza patrones: revisa tus gastos cada domingo para identificar tendencias y ajustar" },
                new() { Id = 19, Category = "Gastos", Difficulty = "Beginner", Advice = "‚ùî Pregunta '¬øLo necesito o lo quiero?': esta simple pregunta puede reducir gastos impulsivos hasta 40%" },
                new() { Id = 20, Category = "Gastos", Difficulty = "Intermediate", Advice = "üéØ Establece l√≠mites por categor√≠a: asigna montos m√°ximos para entretenimiento, comida fuera, etc." },
                new() { Id = 21, Category = "Gastos", Difficulty = "Advanced", Advice = "üì± Usa solo efectivo para gastos discrecionales: el dolor de pagar en efectivo reduce gastos en 20%" },
                new() { Id = 22, Category = "Gastos", Difficulty = "Beginner", Advice = "üïí Evita compras nocturnas: la mayor√≠a de las compras impulsivas ocurren despu√©s de las 8 PM" },
                new() { Id = 23, Category = "Gastos", Difficulty = "Intermediate", Advice = "üì¶ Espera 30 d√≠as para compras grandes: si todav√≠a lo quieres despu√©s de un mes, consid√©ralo seriamente" },
                new() { Id = 24, Category = "Gastos", Difficulty = "Beginner", Advice = "üçΩÔ∏è Come antes de comprar: ir al supermercado con hambre aumenta los gastos en 25%" },
                new() { Id = 25, Category = "Gastos", Difficulty = "Intermediate", Advice = "üîç Compara precios: siempre revisa al menos 3 opciones antes de compras importantes" },
                new() { Id = 26, Category = "Gastos", Difficulty = "Advanced", Advice = "üìÖ Compra en temporada baja: viajes, ropa y electr√≥nicos tienen mejores precios en temporadas espec√≠ficas" },
                new() { Id = 27, Category = "Gastos", Difficulty = "Beginner", Advice = "üí° Usa iluminaci√≥n LED: reduce tu factura de electricidad hasta 80% en iluminaci√≥n" },
                new() { Id = 28, Category = "Gastos", Difficulty = "Intermediate", Advice = "üö∞ Reduce consumo de agua: instala aireadores en grifos y toma duchas m√°s cortas" },
                new() { Id = 29, Category = "Gastos", Difficulty = "Beginner", Advice = "üì± Desactiva notificaciones de compras: menos tentaci√≥n, menos gastos impulsivos" },
                new() { Id = 30, Category = "Gastos", Difficulty = "Advanced", Advice = "üè† Optimiza servicios del hogar: revisa seguros, planes de tel√©fono y TV cada 6 meses" },

                // üìà CATEGOR√çA: INVERSIONES (10 consejos)
                new() { Id = 31, Category = "Inversiones", Difficulty = "Beginner", Advice = "‚è∞ Comienza temprano: gracias al inter√©s compuesto, empezar a los 25 vs 35 puede duplicar tu patrimonio" },
                new() { Id = 32, Category = "Inversiones", Difficulty = "Beginner", Advice = "üìä Diversifica: no pongas todos tus huevos en la misma canasta, distribuye tu riesgo" },
                new() { Id = 33, Category = "Inversiones", Difficulty = "Intermediate", Advice = "üîÑ Inversi√≥n autom√°tica: configura aportes autom√°ticos a fondos indexados cada mes" },
                new() { Id = 34, Category = "Inversiones", Difficulty = "Advanced", Advice = "üìâ Compra cuando hay miedo: los mejores momentos para invertir son cuando otros tienen p√°nico" },
                new() { Id = 35, Category = "Inversiones", Difficulty = "Beginner", Advice = "üéØ Enf√≥cate en el largo plazo: el tiempo en el mercado supera al timing del mercado" },
                new() { Id = 36, Category = "Inversiones", Difficulty = "Intermediate", Advice = "üí∞ Reinvierte dividendos: el inter√©s compuesto es la octava maravilla del mundo" },
                new() { Id = 37, Category = "Inversiones", Difficulty = "Beginner", Advice = "üìö Ed√∫cate constantemente: dedica 1 hora semanal a aprender sobre finanzas personales" },
                new() { Id = 38, Category = "Inversiones", Difficulty = "Advanced", Advice = "üè¶ Minimiza comisiones: incluso 1% de comisi√≥n anual puede reducir tu patrimonio final en 30%" },
                new() { Id = 39, Category = "Inversiones", Difficulty = "Intermediate", Advice = "üìÖ Dollar-cost averaging: invierte la misma cantidad regularmente sin importar las condiciones del mercado" },
                new() { Id = 40, Category = "Inversiones", Difficulty = "Beginner", Advice = "üõ°Ô∏è Primero fondos de emergencia: antes de invertir, asegura 3-6 meses de gastos esenciales" },

                // üéØ CATEGOR√çA: METAS Y PLANIFICACI√ìN (10 consejos)
                new() { Id = 41, Category = "Metas", Difficulty = "Beginner", Advice = "üìù Escribe tus metas: las personas que escriben sus metas tienen 42% m√°s probabilidad de lograrlas" },
                new() { Id = 42, Category = "Metas", Difficulty = "Intermediate", Advice = "üéØ Divide y vencer√°s: divide metas grandes en hitos mensuales y celebra cada logro" },
                new() { Id = 43, Category = "Metas", Difficulty = "Beginner", Advice = "üìä Revisa progreso semanal: 15 minutos cada domingo para ajustar tu plan seg√∫n el progreso" },
                new() { Id = 44, Category = "Metas", Difficulty = "Advanced", Advice = "üîÑ Planificaci√≥n por escenarios: prepara planes A, B y C para diferentes situaciones econ√≥micas" },
                new() { Id = 45, Category = "Metas", Difficulty = "Intermediate", Advice = "üí∞ Automatiza tus metas: configura transferencias autom√°ticas hacia cada meta espec√≠fica" },
                new() { Id = 46, Category = "Metas", Difficulty = "Beginner", Advice = "üéâ Recomp√©nsate: celebra los hitos alcanzados con recompensas que no saboteen tu progreso" },
                new() { Id = 47, Category = "Metas", Difficulty = "Intermediate", Advice = "üì± Usa visualizaciones: gr√°ficos y progreso visual aumentan la motivaci√≥n en 35%" },
                new() { Id = 48, Category = "Metas", Difficulty = "Advanced", Advice = "üîÑ Revisi√≥n trimestral: cada 3 meses, eval√∫a si tus metas siguen alineadas con tus prioridades" },
                new() { Id = 49, Category = "Metas", Difficulty = "Beginner", Advice = "ü§ù Comparte tus metas: cont√°rselo a alguien aumenta tu compromiso y accountability" },
                new() { Id = 50, Category = "Metas", Difficulty = "Intermediate", Advice = "üìà Ajusta por inflaci√≥n: considera aumentos de precios al planificar metas a largo plazo" },

                // üß† CATEGOR√çA: PSICOLOG√çA FINANCIERA (5 consejos)
                new() { Id = 51, Category = "Psicolog√≠a", Difficulty = "Beginner", Advice = "üé≠ Identifica tus triggers emocionales: ¬øcompras por estr√©s, aburrimiento o felicidad?" },
                new() { Id = 52, Category = "Psicolog√≠a", Difficulty = "Intermediate", Advice = "üîÑ Cambia tu mentalidad: de 'no puedo gastar' a 'elijo ahorrar para...'" },
                new() { Id = 53, Category = "Psicolog√≠a", Difficulty = "Beginner", Advice = "üìö Aprende de los errores: cada 'desliz' financiero es una oportunidad de aprendizaje" },
                new() { Id = 54, Category = "Psicolog√≠a", Difficulty = "Advanced", Advice = "üßò Practica mindfulness financiero: 5 minutos diarios de conciencia sobre tus h√°bitos de gasto" },
                new() { Id = 55, Category = "Psicolog√≠a", Difficulty = "Intermediate", Advice = "üéØ Enf√≥cate en el progreso, no en la perfecci√≥n: peque√±os pasos consistentes crean grandes resultados" }
            };
        }
    }     

    // En tu IFinanceService - modelos b√°sicos
    public class ChartData
    {
        public string Type { get; set; } = "line";
        public string[] Labels { get; set; } = Array.Empty<string>();
        public List<ChartDataset> Datasets { get; set; } = new();
        // Solo mantener options b√°sicos
        public ChartOptions Options { get; set; } = new();
    }

    public class ChartDataset
    {
        public string Label { get; set; } = string.Empty;
        public decimal[] Data { get; set; } = Array.Empty<decimal>();
        public string[] BackgroundColor { get; set; } = Array.Empty<string>();
        public string[] BorderColor { get; set; } = Array.Empty<string>();
        public int BorderWidth { get; set; } = 2;
        public bool Fill { get; set; } = false;
        public decimal? Tension { get; set; } = 0.4m;
        
        // Propiedades para puntos (opcionales)
        public string[] PointBackgroundColor { get; set; } = Array.Empty<string>();
        public string[] PointBorderColor { get; set; } = Array.Empty<string>();
        public int PointBorderWidth { get; set; } = 2;
        public int PointRadius { get; set; } = 3;
        public int PointHoverRadius { get; set; } = 5;
        public string PointStyle { get; set; } = "circle";
        public int[] BorderDash { get; set; } = Array.Empty<int>();
    }

    public class ChartOptions
    {
        public bool Responsive { get; set; } = true;
        public bool MaintainAspectRatio { get; set; } = false;
        public ChartPlugins Plugins { get; set; } = new();
    }

    public class ChartPlugins
    {
        public ChartLegend Legend { get; set; } = new();
    }

    public class ChartLegend
    {
        public bool Display { get; set; } = true;
        public string Position { get; set; } = "top";
    }
}